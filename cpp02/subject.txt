Бонусные правила:
С этого момента каждый написанный вами класс ДОЛЖЕН быть в ортодоксальной канонической форме: по крайней мере,
один конструктор по умолчанию, конструктор копирования, перегрузка оператора присваивания и
деструктор. Больше не будем спрашивать.

ex00
Вы знаете целые числа, а также числа с плавающей запятой. Как мило.
Прочтите эту трехстраничную статью (1, 2, 3), чтобы узнать, что вы этого не делаете. Давай, прочти.
До сегодняшнего дня любые числа, которые вы использовали в своих программах, были в основном целыми числами или числами с плавающей запятой, или любыми их вариантами (короткими, символьными, длинными, двойными и т. Д.). Из предыдущего прочтения можно с уверенностью предположить, что целые числа и числа с плавающей запятой имеют противоположные
характеристики.
Но сегодня это изменится. Вы откроете для себя новый удивительный тип чисел: числа с фиксированной запятой! Числа с фиксированной запятой, которые всегда отсутствуют в большинстве языков скалярных типов, предлагают ценный баланс между производительностью, точностью, диапазоном и точностью, который
объясняет, почему эти числа широко используются в графике, звуке или научном программировании, и это лишь некоторые из них.
Поскольку в C ++ отсутствуют числа с фиксированной запятой, вы собираетесь добавить их сегодня. Я бы порекомендовал для начала эту статью из Беркли. Если это хорошо для них, это хорошо для вас. Если вы не знаете, что такое Беркли, прочтите этот раздел их страницы в Википедии.
Приватные члены:
◦ Целое число для хранения значения фиксированной точки.
◦ Статическое постоянное целое число для хранения количества дробных битов. Эта константа всегда будет литеральным числом 8.
• Публичные члены:
◦ Конструктор по умолчанию, который инициализирует значение фиксированной точки равным 0.
◦ Деструктор.
◦ Конструктор копирования.
◦ Перегрузка оператора присваивания.
◦ Функция-член int getRawBits (void) const; который возвращает исходное значение фиксированной точки.
◦ Функция-член void setRawBits (int const raw); который устанавливает исходное значение фиксированной точки.
Код:
Выход:

ex01

Хорошо, ex00 было хорошим началом, но наш класс по-прежнему довольно бесполезен, поскольку может представлять только значение фиксированной точки 0,0. Добавьте в класс следующие общедоступные конструкторы и общедоступные функции-члены:
• Конструктор, который принимает в качестве параметра постоянное целое число и преобразует его в соответствующее значение фиксированной (8) точки. Значение дробных битов инициализируется как в ex00.
• Конструктор, который принимает в качестве параметра постоянную плавающую точку и преобразует его в соответствующее значение с фиксированной (8) точкой. Значение дробных битов инициализируется как в ex00.
• Функция-член float toFloat (void) const; который преобразует значение с фиксированной запятой в значение с плавающей запятой.
• Функция-член int toInt (void) const; который преобразует значение с фиксированной точкой в ​​целочисленное значение.
Вы также добавите следующую перегрузку функции в файлы заголовка (объявления) и источника (определения):
• Перегрузка оператора «, который вставляет представление с плавающей запятой значения с фиксированной запятой в поток вывода параметра.
Код:
Должен вывести что-то вроде:

ex02

Мы приближаемся. Добавьте в свой класс следующие перегрузки общедоступных операторов-членов:
• Шесть операторов сравнения:>, <,> =, <=, == и! =.
• Четыре арифметических оператора: +, -, * и /.
• Операторы пре-инкремента, пост-инкремента, пре-декремента и пост-декремента, которые увеличивают или уменьшают значение фиксированной точки от наименьшего представимого, такого как 1 +> 1.
Добавьте в класс следующие перегрузки общедоступных статических функций-членов:
• Статическая функция-член min, которая принимает ссылки на два значения с фиксированной точкой и возвращает ссылку на наименьшее значение, и перегрузку, которая принимает ссылки на два постоянных значения с фиксированной точкой и возвращает ссылку на наименьшую константу.
ценить.
• Статическая функция-член max, которая принимает ссылки на два значения с фиксированной точкой и возвращает ссылку на наибольшее значение, и перегрузку, которая принимает ссылки на два постоянных значения с фиксированной точкой и возвращает ссылку на наибольшее постоянное значение.
Вам решать протестировать каждую функцию вашего класса, кроме короткого кода:
Должен вывести что-то вроде (я удалил журналы ctors / dtor):


ex03
Это упражнение не требуется для проверки этого модуля.
Теперь, когда у вас есть полностью рабочий класс с фиксированной точкой, было бы здорово использовать его для чего-нибудь полезного. Вы собираетесь написать функцию, которая указывает, находится ли точка внутри треугольника или нет. Очень полезно, не правда ли?
BSP означает разделение двоичного пространства. Добро пожаловать :)
Начнем с написания ортодоксального класса Point для представления двухмерной точки:
• Частные члены:
◦ A Fixed const x
◦ A Fixed const y
◦ Все остальное, что вы считаете полезным.
• Публичные члены:
◦ Конструктор по умолчанию, который инициализирует x и y равными 0.
◦ Деструктор.
◦ Конструктор копирования.
◦ Конструктор, который принимает две постоянные числа с плавающей запятой в качестве параметров и инициализирует x и y этими значениями.
◦ Перегрузка оператора присваивания.
◦ Все остальное, что вы считаете полезным.
Теперь вам нужно написать функцию bsp:
• Первые три параметра - это вершины нашего любимого треугольника.
• Четвертый пункт - это вопрос, который мы оцениваем.
• Возвращаемое значение - Истина, если указатель t находится внутри треугольника, иначе возвращаемое значение должно быть False. 
Это означает, что если точка является вершиной или точкой, находящейся на краю, возвращаемое значение должно быть False.
• Следовательно, прототип функции: bool bsp (Point const a, Point const b, Point const c, Point const point) ;.
Не забудьте сдать свою основную часть тестов, чтобы доказать, что ваш класс работает так, как задумано. 




Default constructor called
Copy constructor called
Assignation operator called // <-- This line may be missing depending on your implementation
getRawBits member function called
Default constructor called
Assignation operator called
getRawBits member function called
getRawBits member function called
0
getRawBits member function called
0
getRawBits member function called
0
Destructor called
Destructor called
Destructor called